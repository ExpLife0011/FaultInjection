////////////////////////////////////////////////////////////////////////
//
// FaultInjectionXML.h
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#ifndef FaultInjectionXML_H_INCLUDED
#define FaultInjectionXML_H_INCLUDED

#if _MSC_VER > 1000
	#pragma once
#endif // _MSC_VER > 1000


//#ifndef _USRDLL
//	#define FaultInjectionXML_DECLSPECIFIER
//#else
	#ifdef FaultInjectionXML_EXPORTS
		#define FaultInjectionXML_DECLSPECIFIER __declspec(dllexport)
	#else
		#define FaultInjectionXML_DECLSPECIFIER __declspec(dllimport)
	#endif
//#endif

namespace NSFaultInjectionXML
{

class CFaultInjectionXMLDoc;
class CServiceType;
class CServiceFaultType;
class CProcessType;
class CProcessFaultType;
class CFaultItemType;
class CBasicServiceFaultType;
class CDBConnectInfoType;
class CPWFaultType;
class CTableFaultType;
class CFaultItemType2;
class CDBFaultType;
class CCPUFaultType;
class CMEMFaultType;
class CDiskIOFaultType;
class CFaultItemType3;
class CHostFaultType;
class CFilterType;
class CLagFaultType;
class CDropFaultType;
class CThrottleFaultType;
class CDuplicateFaultType;
class COutOfOrderFaultType;
class CTamperFaultType;
class CFaultItemType4;
class CNetWokFaultType;
class CPortNoType;
class CFaultItemType5;
class CPortFaultType;
class CRTFaultType;
class CFaultItemType6;
class CRegisterTableFaultType;
class CFaultItemType7;
class CVirtualMachineFaultType;
class CFaultInjectXMLType;


class FaultInjectionXML_DECLSPECIFIER CFaultInjectionXMLDoc : public CDoc
{
protected:
	virtual void DeclareNamespaces(xercesc::DOMElement* pElement);
};


class FaultInjectionXML_DECLSPECIFIER CServiceType : public CNode
{
public:
	CServiceType() : CNode() {}
	CServiceType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CServiceType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CServiceType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// string SvrName (1...1)
	//
	static int GetSvrNameMinCount();
	static int GetSvrNameMaxCount();
	int GetSvrNameCount();
	bool HasSvrName();
	void AddSvrName(CSchemaString SvrName);
	void InsertSvrNameAt(CSchemaString SvrName, int nIndex);
	void ReplaceSvrNameAt(CSchemaString SvrName, int nIndex);
	CSchemaString GetSvrNameAt(int nIndex);
	CSchemaString GetSvrName();
	xercesc::DOMNode* GetStartingSvrNameCursor();
	xercesc::DOMNode* GetAdvancedSvrNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetSvrNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveSvrNameAt(int nIndex);
	void RemoveSvrName();
};


class FaultInjectionXML_DECLSPECIFIER CServiceFaultType : public CNode
{
public:
	CServiceFaultType() : CNode() {}
	CServiceFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CServiceFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CServiceFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// Service Service (1...1)
	//
	static int GetServiceMinCount();
	static int GetServiceMaxCount();
	int GetServiceCount();
	bool HasService();
	void AddService(CServiceType& Service);
	void InsertServiceAt(CServiceType& Service, int nIndex);
	void ReplaceServiceAt(CServiceType& Service, int nIndex);
	CServiceType GetServiceAt(int nIndex);
	CServiceType GetService();
	xercesc::DOMNode* GetStartingServiceCursor();
	xercesc::DOMNode* GetAdvancedServiceCursor(xercesc::DOMNode* pCurNode);
	CServiceType GetServiceValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveServiceAt(int nIndex);
	void RemoveService();
};


class FaultInjectionXML_DECLSPECIFIER CProcessType : public CNode
{
public:
	CProcessType() : CNode() {}
	CProcessType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CProcessType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CProcessType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// string ProcName (1...1)
	//
	static int GetProcNameMinCount();
	static int GetProcNameMaxCount();
	int GetProcNameCount();
	bool HasProcName();
	void AddProcName(CSchemaString ProcName);
	void InsertProcNameAt(CSchemaString ProcName, int nIndex);
	void ReplaceProcNameAt(CSchemaString ProcName, int nIndex);
	CSchemaString GetProcNameAt(int nIndex);
	CSchemaString GetProcName();
	xercesc::DOMNode* GetStartingProcNameCursor();
	xercesc::DOMNode* GetAdvancedProcNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetProcNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveProcNameAt(int nIndex);
	void RemoveProcName();
};


class FaultInjectionXML_DECLSPECIFIER CProcessFaultType : public CNode
{
public:
	CProcessFaultType() : CNode() {}
	CProcessFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CProcessFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CProcessFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// Process Process (1...1)
	//
	static int GetProcessMinCount();
	static int GetProcessMaxCount();
	int GetProcessCount();
	bool HasProcess();
	void AddProcess(CProcessType& Process);
	void InsertProcessAt(CProcessType& Process, int nIndex);
	void ReplaceProcessAt(CProcessType& Process, int nIndex);
	CProcessType GetProcessAt(int nIndex);
	CProcessType GetProcess();
	xercesc::DOMNode* GetStartingProcessCursor();
	xercesc::DOMNode* GetAdvancedProcessCursor(xercesc::DOMNode* pCurNode);
	CProcessType GetProcessValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveProcessAt(int nIndex);
	void RemoveProcess();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType : public CNode
{
public:
	CFaultItemType() : CNode() {}
	CFaultItemType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// ServiceFault ServiceFault (1...1)
	//
	static int GetServiceFaultMinCount();
	static int GetServiceFaultMaxCount();
	int GetServiceFaultCount();
	bool HasServiceFault();
	void AddServiceFault(CServiceFaultType& ServiceFault);
	void InsertServiceFaultAt(CServiceFaultType& ServiceFault, int nIndex);
	void ReplaceServiceFaultAt(CServiceFaultType& ServiceFault, int nIndex);
	CServiceFaultType GetServiceFaultAt(int nIndex);
	CServiceFaultType GetServiceFault();
	xercesc::DOMNode* GetStartingServiceFaultCursor();
	xercesc::DOMNode* GetAdvancedServiceFaultCursor(xercesc::DOMNode* pCurNode);
	CServiceFaultType GetServiceFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveServiceFaultAt(int nIndex);
	void RemoveServiceFault();

	//
	// ProcessFault ProcessFault (1...1)
	//
	static int GetProcessFaultMinCount();
	static int GetProcessFaultMaxCount();
	int GetProcessFaultCount();
	bool HasProcessFault();
	void AddProcessFault(CProcessFaultType& ProcessFault);
	void InsertProcessFaultAt(CProcessFaultType& ProcessFault, int nIndex);
	void ReplaceProcessFaultAt(CProcessFaultType& ProcessFault, int nIndex);
	CProcessFaultType GetProcessFaultAt(int nIndex);
	CProcessFaultType GetProcessFault();
	xercesc::DOMNode* GetStartingProcessFaultCursor();
	xercesc::DOMNode* GetAdvancedProcessFaultCursor(xercesc::DOMNode* pCurNode);
	CProcessFaultType GetProcessFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveProcessFaultAt(int nIndex);
	void RemoveProcessFault();
};


class FaultInjectionXML_DECLSPECIFIER CBasicServiceFaultType : public CNode
{
public:
	CBasicServiceFaultType() : CNode() {}
	CBasicServiceFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CBasicServiceFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CBasicServiceFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// dateTime StartTime (0...1)
	//
	static int GetStartTimeMinCount();
	static int GetStartTimeMaxCount();
	int GetStartTimeCount();
	bool HasStartTime();
	void AddStartTime(CSchemaDateTime StartTime);
	void InsertStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	void ReplaceStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	CSchemaDateTime GetStartTimeAt(int nIndex);
	CSchemaDateTime GetStartTime();
	xercesc::DOMNode* GetStartingStartTimeCursor();
	xercesc::DOMNode* GetAdvancedStartTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetStartTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveStartTimeAt(int nIndex);
	void RemoveStartTime();

	//
	// dateTime EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaDateTime EndTime);
	void InsertEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	CSchemaDateTime GetEndTimeAt(int nIndex);
	CSchemaDateTime GetEndTime();
	xercesc::DOMNode* GetStartingEndTimeCursor();
	xercesc::DOMNode* GetAdvancedEndTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetEndTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType& FaultItem);
	void InsertFaultItemAt(CFaultItemType& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType& FaultItem, int nIndex);
	CFaultItemType GetFaultItemAt(int nIndex);
	CFaultItemType GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CDBConnectInfoType : public CNode
{
public:
	CDBConnectInfoType() : CNode() {}
	CDBConnectInfoType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CDBConnectInfoType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CDBConnectInfoType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// string DBName (1...1)
	//
	static int GetDBNameMinCount();
	static int GetDBNameMaxCount();
	int GetDBNameCount();
	bool HasDBName();
	void AddDBName(CSchemaString DBName);
	void InsertDBNameAt(CSchemaString DBName, int nIndex);
	void ReplaceDBNameAt(CSchemaString DBName, int nIndex);
	CSchemaString GetDBNameAt(int nIndex);
	CSchemaString GetDBName();
	xercesc::DOMNode* GetStartingDBNameCursor();
	xercesc::DOMNode* GetAdvancedDBNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetDBNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDBNameAt(int nIndex);
	void RemoveDBName();

	//
	// string IP (1...1)
	//
	static int GetIPMinCount();
	static int GetIPMaxCount();
	int GetIPCount();
	bool HasIP();
	void AddIP(CSchemaString IP);
	void InsertIPAt(CSchemaString IP, int nIndex);
	void ReplaceIPAt(CSchemaString IP, int nIndex);
	CSchemaString GetIPAt(int nIndex);
	CSchemaString GetIP();
	xercesc::DOMNode* GetStartingIPCursor();
	xercesc::DOMNode* GetAdvancedIPCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetIPValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIPAt(int nIndex);
	void RemoveIP();

	//
	// string Port (1...1)
	//
	static int GetPortMinCount();
	static int GetPortMaxCount();
	int GetPortCount();
	bool HasPort();
	void AddPort(CSchemaString Port);
	void InsertPortAt(CSchemaString Port, int nIndex);
	void ReplacePortAt(CSchemaString Port, int nIndex);
	CSchemaString GetPortAt(int nIndex);
	CSchemaString GetPort();
	xercesc::DOMNode* GetStartingPortCursor();
	xercesc::DOMNode* GetAdvancedPortCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetPortValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePortAt(int nIndex);
	void RemovePort();

	//
	// string ServerName (1...1)
	//
	static int GetServerNameMinCount();
	static int GetServerNameMaxCount();
	int GetServerNameCount();
	bool HasServerName();
	void AddServerName(CSchemaString ServerName);
	void InsertServerNameAt(CSchemaString ServerName, int nIndex);
	void ReplaceServerNameAt(CSchemaString ServerName, int nIndex);
	CSchemaString GetServerNameAt(int nIndex);
	CSchemaString GetServerName();
	xercesc::DOMNode* GetStartingServerNameCursor();
	xercesc::DOMNode* GetAdvancedServerNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetServerNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveServerNameAt(int nIndex);
	void RemoveServerName();

	//
	// string UserName (1...1)
	//
	static int GetUserNameMinCount();
	static int GetUserNameMaxCount();
	int GetUserNameCount();
	bool HasUserName();
	void AddUserName(CSchemaString UserName);
	void InsertUserNameAt(CSchemaString UserName, int nIndex);
	void ReplaceUserNameAt(CSchemaString UserName, int nIndex);
	CSchemaString GetUserNameAt(int nIndex);
	CSchemaString GetUserName();
	xercesc::DOMNode* GetStartingUserNameCursor();
	xercesc::DOMNode* GetAdvancedUserNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetUserNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveUserNameAt(int nIndex);
	void RemoveUserName();

	//
	// string PassWord (1...1)
	//
	static int GetPassWordMinCount();
	static int GetPassWordMaxCount();
	int GetPassWordCount();
	bool HasPassWord();
	void AddPassWord(CSchemaString PassWord);
	void InsertPassWordAt(CSchemaString PassWord, int nIndex);
	void ReplacePassWordAt(CSchemaString PassWord, int nIndex);
	CSchemaString GetPassWordAt(int nIndex);
	CSchemaString GetPassWord();
	xercesc::DOMNode* GetStartingPassWordCursor();
	xercesc::DOMNode* GetAdvancedPassWordCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetPassWordValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePassWordAt(int nIndex);
	void RemovePassWord();
};


class FaultInjectionXML_DECLSPECIFIER CPWFaultType : public CNode
{
public:
	CPWFaultType() : CNode() {}
	CPWFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CPWFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CPWFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// string UserName (1...1)
	//
	static int GetUserNameMinCount();
	static int GetUserNameMaxCount();
	int GetUserNameCount();
	bool HasUserName();
	void AddUserName(CSchemaString UserName);
	void InsertUserNameAt(CSchemaString UserName, int nIndex);
	void ReplaceUserNameAt(CSchemaString UserName, int nIndex);
	CSchemaString GetUserNameAt(int nIndex);
	CSchemaString GetUserName();
	xercesc::DOMNode* GetStartingUserNameCursor();
	xercesc::DOMNode* GetAdvancedUserNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetUserNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveUserNameAt(int nIndex);
	void RemoveUserName();

	//
	// string OldPW (1...1)
	//
	static int GetOldPWMinCount();
	static int GetOldPWMaxCount();
	int GetOldPWCount();
	bool HasOldPW();
	void AddOldPW(CSchemaString OldPW);
	void InsertOldPWAt(CSchemaString OldPW, int nIndex);
	void ReplaceOldPWAt(CSchemaString OldPW, int nIndex);
	CSchemaString GetOldPWAt(int nIndex);
	CSchemaString GetOldPW();
	xercesc::DOMNode* GetStartingOldPWCursor();
	xercesc::DOMNode* GetAdvancedOldPWCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetOldPWValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveOldPWAt(int nIndex);
	void RemoveOldPW();

	//
	// string NewPW (1...1)
	//
	static int GetNewPWMinCount();
	static int GetNewPWMaxCount();
	int GetNewPWCount();
	bool HasNewPW();
	void AddNewPW(CSchemaString NewPW);
	void InsertNewPWAt(CSchemaString NewPW, int nIndex);
	void ReplaceNewPWAt(CSchemaString NewPW, int nIndex);
	CSchemaString GetNewPWAt(int nIndex);
	CSchemaString GetNewPW();
	xercesc::DOMNode* GetStartingNewPWCursor();
	xercesc::DOMNode* GetAdvancedNewPWCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetNewPWValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveNewPWAt(int nIndex);
	void RemoveNewPW();
};


class FaultInjectionXML_DECLSPECIFIER CTableFaultType : public CNode
{
public:
	CTableFaultType() : CNode() {}
	CTableFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CTableFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CTableFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// string TableName (1...1)
	//
	static int GetTableNameMinCount();
	static int GetTableNameMaxCount();
	int GetTableNameCount();
	bool HasTableName();
	void AddTableName(CSchemaString TableName);
	void InsertTableNameAt(CSchemaString TableName, int nIndex);
	void ReplaceTableNameAt(CSchemaString TableName, int nIndex);
	CSchemaString GetTableNameAt(int nIndex);
	CSchemaString GetTableName();
	xercesc::DOMNode* GetStartingTableNameCursor();
	xercesc::DOMNode* GetAdvancedTableNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetTableNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveTableNameAt(int nIndex);
	void RemoveTableName();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType2 : public CNode
{
public:
	CFaultItemType2() : CNode() {}
	CFaultItemType2(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType2(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType2() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// string DBType (1...1)
	//
	static int GetDBTypeMinCount();
	static int GetDBTypeMaxCount();
	int GetDBTypeCount();
	bool HasDBType();
	void AddDBType(CSchemaString DBType);
	void InsertDBTypeAt(CSchemaString DBType, int nIndex);
	void ReplaceDBTypeAt(CSchemaString DBType, int nIndex);
	CSchemaString GetDBTypeAt(int nIndex);
	CSchemaString GetDBType();
	xercesc::DOMNode* GetStartingDBTypeCursor();
	xercesc::DOMNode* GetAdvancedDBTypeCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetDBTypeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDBTypeAt(int nIndex);
	void RemoveDBType();

	//
	// DBConnectInfo DBConnectInfo (1...1)
	//
	static int GetDBConnectInfoMinCount();
	static int GetDBConnectInfoMaxCount();
	int GetDBConnectInfoCount();
	bool HasDBConnectInfo();
	void AddDBConnectInfo(CDBConnectInfoType& DBConnectInfo);
	void InsertDBConnectInfoAt(CDBConnectInfoType& DBConnectInfo, int nIndex);
	void ReplaceDBConnectInfoAt(CDBConnectInfoType& DBConnectInfo, int nIndex);
	CDBConnectInfoType GetDBConnectInfoAt(int nIndex);
	CDBConnectInfoType GetDBConnectInfo();
	xercesc::DOMNode* GetStartingDBConnectInfoCursor();
	xercesc::DOMNode* GetAdvancedDBConnectInfoCursor(xercesc::DOMNode* pCurNode);
	CDBConnectInfoType GetDBConnectInfoValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDBConnectInfoAt(int nIndex);
	void RemoveDBConnectInfo();

	//
	// PWFault PWFault (1...1)
	//
	static int GetPWFaultMinCount();
	static int GetPWFaultMaxCount();
	int GetPWFaultCount();
	bool HasPWFault();
	void AddPWFault(CPWFaultType& PWFault);
	void InsertPWFaultAt(CPWFaultType& PWFault, int nIndex);
	void ReplacePWFaultAt(CPWFaultType& PWFault, int nIndex);
	CPWFaultType GetPWFaultAt(int nIndex);
	CPWFaultType GetPWFault();
	xercesc::DOMNode* GetStartingPWFaultCursor();
	xercesc::DOMNode* GetAdvancedPWFaultCursor(xercesc::DOMNode* pCurNode);
	CPWFaultType GetPWFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePWFaultAt(int nIndex);
	void RemovePWFault();

	//
	// TableFault TableFault (1...1)
	//
	static int GetTableFaultMinCount();
	static int GetTableFaultMaxCount();
	int GetTableFaultCount();
	bool HasTableFault();
	void AddTableFault(CTableFaultType& TableFault);
	void InsertTableFaultAt(CTableFaultType& TableFault, int nIndex);
	void ReplaceTableFaultAt(CTableFaultType& TableFault, int nIndex);
	CTableFaultType GetTableFaultAt(int nIndex);
	CTableFaultType GetTableFault();
	xercesc::DOMNode* GetStartingTableFaultCursor();
	xercesc::DOMNode* GetAdvancedTableFaultCursor(xercesc::DOMNode* pCurNode);
	CTableFaultType GetTableFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveTableFaultAt(int nIndex);
	void RemoveTableFault();
};


class FaultInjectionXML_DECLSPECIFIER CDBFaultType : public CNode
{
public:
	CDBFaultType() : CNode() {}
	CDBFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CDBFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CDBFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType2& FaultItem);
	void InsertFaultItemAt(CFaultItemType2& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType2& FaultItem, int nIndex);
	CFaultItemType2 GetFaultItemAt(int nIndex);
	CFaultItemType2 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType2 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CCPUFaultType : public CNode
{
public:
	CCPUFaultType() : CNode() {}
	CCPUFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CCPUFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CCPUFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// long CPUUsage (1...1)
	//
	static int GetCPUUsageMinCount();
	static int GetCPUUsageMaxCount();
	int GetCPUUsageCount();
	bool HasCPUUsage();
	void AddCPUUsage(CSchemaLong CPUUsage);
	void InsertCPUUsageAt(CSchemaLong CPUUsage, int nIndex);
	void ReplaceCPUUsageAt(CSchemaLong CPUUsage, int nIndex);
	CSchemaLong GetCPUUsageAt(int nIndex);
	CSchemaLong GetCPUUsage();
	xercesc::DOMNode* GetStartingCPUUsageCursor();
	xercesc::DOMNode* GetAdvancedCPUUsageCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetCPUUsageValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveCPUUsageAt(int nIndex);
	void RemoveCPUUsage();
};


class FaultInjectionXML_DECLSPECIFIER CMEMFaultType : public CNode
{
public:
	CMEMFaultType() : CNode() {}
	CMEMFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CMEMFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CMEMFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// long MEMUsage (1...1)
	//
	static int GetMEMUsageMinCount();
	static int GetMEMUsageMaxCount();
	int GetMEMUsageCount();
	bool HasMEMUsage();
	void AddMEMUsage(CSchemaLong MEMUsage);
	void InsertMEMUsageAt(CSchemaLong MEMUsage, int nIndex);
	void ReplaceMEMUsageAt(CSchemaLong MEMUsage, int nIndex);
	CSchemaLong GetMEMUsageAt(int nIndex);
	CSchemaLong GetMEMUsage();
	xercesc::DOMNode* GetStartingMEMUsageCursor();
	xercesc::DOMNode* GetAdvancedMEMUsageCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetMEMUsageValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveMEMUsageAt(int nIndex);
	void RemoveMEMUsage();
};


class FaultInjectionXML_DECLSPECIFIER CDiskIOFaultType : public CNode
{
public:
	CDiskIOFaultType() : CNode() {}
	CDiskIOFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CDiskIOFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CDiskIOFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// long WriteIOByte (1...1)
	//
	static int GetWriteIOByteMinCount();
	static int GetWriteIOByteMaxCount();
	int GetWriteIOByteCount();
	bool HasWriteIOByte();
	void AddWriteIOByte(CSchemaLong WriteIOByte);
	void InsertWriteIOByteAt(CSchemaLong WriteIOByte, int nIndex);
	void ReplaceWriteIOByteAt(CSchemaLong WriteIOByte, int nIndex);
	CSchemaLong GetWriteIOByteAt(int nIndex);
	CSchemaLong GetWriteIOByte();
	xercesc::DOMNode* GetStartingWriteIOByteCursor();
	xercesc::DOMNode* GetAdvancedWriteIOByteCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetWriteIOByteValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveWriteIOByteAt(int nIndex);
	void RemoveWriteIOByte();

	//
	// long ReadIOByte (1...1)
	//
	static int GetReadIOByteMinCount();
	static int GetReadIOByteMaxCount();
	int GetReadIOByteCount();
	bool HasReadIOByte();
	void AddReadIOByte(CSchemaLong ReadIOByte);
	void InsertReadIOByteAt(CSchemaLong ReadIOByte, int nIndex);
	void ReplaceReadIOByteAt(CSchemaLong ReadIOByte, int nIndex);
	CSchemaLong GetReadIOByteAt(int nIndex);
	CSchemaLong GetReadIOByte();
	xercesc::DOMNode* GetStartingReadIOByteCursor();
	xercesc::DOMNode* GetAdvancedReadIOByteCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetReadIOByteValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveReadIOByteAt(int nIndex);
	void RemoveReadIOByte();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType3 : public CNode
{
public:
	CFaultItemType3() : CNode() {}
	CFaultItemType3(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType3(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType3() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// CPUFault CPUFault (0...1)
	//
	static int GetCPUFaultMinCount();
	static int GetCPUFaultMaxCount();
	int GetCPUFaultCount();
	bool HasCPUFault();
	void AddCPUFault(CCPUFaultType& CPUFault);
	void InsertCPUFaultAt(CCPUFaultType& CPUFault, int nIndex);
	void ReplaceCPUFaultAt(CCPUFaultType& CPUFault, int nIndex);
	CCPUFaultType GetCPUFaultAt(int nIndex);
	CCPUFaultType GetCPUFault();
	xercesc::DOMNode* GetStartingCPUFaultCursor();
	xercesc::DOMNode* GetAdvancedCPUFaultCursor(xercesc::DOMNode* pCurNode);
	CCPUFaultType GetCPUFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveCPUFaultAt(int nIndex);
	void RemoveCPUFault();

	//
	// MEMFault MEMFault (0...1)
	//
	static int GetMEMFaultMinCount();
	static int GetMEMFaultMaxCount();
	int GetMEMFaultCount();
	bool HasMEMFault();
	void AddMEMFault(CMEMFaultType& MEMFault);
	void InsertMEMFaultAt(CMEMFaultType& MEMFault, int nIndex);
	void ReplaceMEMFaultAt(CMEMFaultType& MEMFault, int nIndex);
	CMEMFaultType GetMEMFaultAt(int nIndex);
	CMEMFaultType GetMEMFault();
	xercesc::DOMNode* GetStartingMEMFaultCursor();
	xercesc::DOMNode* GetAdvancedMEMFaultCursor(xercesc::DOMNode* pCurNode);
	CMEMFaultType GetMEMFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveMEMFaultAt(int nIndex);
	void RemoveMEMFault();

	//
	// DiskIOFault DiskIOFault (0...1)
	//
	static int GetDiskIOFaultMinCount();
	static int GetDiskIOFaultMaxCount();
	int GetDiskIOFaultCount();
	bool HasDiskIOFault();
	void AddDiskIOFault(CDiskIOFaultType& DiskIOFault);
	void InsertDiskIOFaultAt(CDiskIOFaultType& DiskIOFault, int nIndex);
	void ReplaceDiskIOFaultAt(CDiskIOFaultType& DiskIOFault, int nIndex);
	CDiskIOFaultType GetDiskIOFaultAt(int nIndex);
	CDiskIOFaultType GetDiskIOFault();
	xercesc::DOMNode* GetStartingDiskIOFaultCursor();
	xercesc::DOMNode* GetAdvancedDiskIOFaultCursor(xercesc::DOMNode* pCurNode);
	CDiskIOFaultType GetDiskIOFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDiskIOFaultAt(int nIndex);
	void RemoveDiskIOFault();
};


class FaultInjectionXML_DECLSPECIFIER CHostFaultType : public CNode
{
public:
	CHostFaultType() : CNode() {}
	CHostFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CHostFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CHostFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// dateTime StartTime (0...1)
	//
	static int GetStartTimeMinCount();
	static int GetStartTimeMaxCount();
	int GetStartTimeCount();
	bool HasStartTime();
	void AddStartTime(CSchemaDateTime StartTime);
	void InsertStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	void ReplaceStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	CSchemaDateTime GetStartTimeAt(int nIndex);
	CSchemaDateTime GetStartTime();
	xercesc::DOMNode* GetStartingStartTimeCursor();
	xercesc::DOMNode* GetAdvancedStartTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetStartTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveStartTimeAt(int nIndex);
	void RemoveStartTime();

	//
	// dateTime EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaDateTime EndTime);
	void InsertEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	CSchemaDateTime GetEndTimeAt(int nIndex);
	CSchemaDateTime GetEndTime();
	xercesc::DOMNode* GetStartingEndTimeCursor();
	xercesc::DOMNode* GetAdvancedEndTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetEndTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType3& FaultItem);
	void InsertFaultItemAt(CFaultItemType3& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType3& FaultItem, int nIndex);
	CFaultItemType3 GetFaultItemAt(int nIndex);
	CFaultItemType3 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType3 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CFilterType : public CNode
{
public:
	CFilterType() : CNode() {}
	CFilterType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFilterType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFilterType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// string Protocal (0...1)
	//
	static int GetProtocalMinCount();
	static int GetProtocalMaxCount();
	int GetProtocalCount();
	bool HasProtocal();
	void AddProtocal(CSchemaString Protocal);
	void InsertProtocalAt(CSchemaString Protocal, int nIndex);
	void ReplaceProtocalAt(CSchemaString Protocal, int nIndex);
	CSchemaString GetProtocalAt(int nIndex);
	CSchemaString GetProtocal();
	xercesc::DOMNode* GetStartingProtocalCursor();
	xercesc::DOMNode* GetAdvancedProtocalCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetProtocalValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveProtocalAt(int nIndex);
	void RemoveProtocal();

	//
	// string IPScope (0...1)
	//
	static int GetIPScopeMinCount();
	static int GetIPScopeMaxCount();
	int GetIPScopeCount();
	bool HasIPScope();
	void AddIPScope(CSchemaString IPScope);
	void InsertIPScopeAt(CSchemaString IPScope, int nIndex);
	void ReplaceIPScopeAt(CSchemaString IPScope, int nIndex);
	CSchemaString GetIPScopeAt(int nIndex);
	CSchemaString GetIPScope();
	xercesc::DOMNode* GetStartingIPScopeCursor();
	xercesc::DOMNode* GetAdvancedIPScopeCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetIPScopeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIPScopeAt(int nIndex);
	void RemoveIPScope();

	//
	// string PortScope (0...1)
	//
	static int GetPortScopeMinCount();
	static int GetPortScopeMaxCount();
	int GetPortScopeCount();
	bool HasPortScope();
	void AddPortScope(CSchemaString PortScope);
	void InsertPortScopeAt(CSchemaString PortScope, int nIndex);
	void ReplacePortScopeAt(CSchemaString PortScope, int nIndex);
	CSchemaString GetPortScopeAt(int nIndex);
	CSchemaString GetPortScope();
	xercesc::DOMNode* GetStartingPortScopeCursor();
	xercesc::DOMNode* GetAdvancedPortScopeCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetPortScopeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePortScopeAt(int nIndex);
	void RemovePortScope();
};


class FaultInjectionXML_DECLSPECIFIER CLagFaultType : public CNode
{
public:
	CLagFaultType() : CNode() {}
	CLagFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CLagFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CLagFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long lagTime (1...1)
	//
	static int GetlagTimeMinCount();
	static int GetlagTimeMaxCount();
	int GetlagTimeCount();
	bool HaslagTime();
	void AddlagTime(CSchemaLong lagTime);
	void InsertlagTimeAt(CSchemaLong lagTime, int nIndex);
	void ReplacelagTimeAt(CSchemaLong lagTime, int nIndex);
	CSchemaLong GetlagTimeAt(int nIndex);
	CSchemaLong GetlagTime();
	xercesc::DOMNode* GetStartinglagTimeCursor();
	xercesc::DOMNode* GetAdvancedlagTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetlagTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovelagTimeAt(int nIndex);
	void RemovelagTime();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER CDropFaultType : public CNode
{
public:
	CDropFaultType() : CNode() {}
	CDropFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CDropFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CDropFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long Rate (1...1)
	//
	static int GetRateMinCount();
	static int GetRateMaxCount();
	int GetRateCount();
	bool HasRate();
	void AddRate(CSchemaLong Rate);
	void InsertRateAt(CSchemaLong Rate, int nIndex);
	void ReplaceRateAt(CSchemaLong Rate, int nIndex);
	CSchemaLong GetRateAt(int nIndex);
	CSchemaLong GetRate();
	xercesc::DOMNode* GetStartingRateCursor();
	xercesc::DOMNode* GetAdvancedRateCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetRateValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRateAt(int nIndex);
	void RemoveRate();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER CThrottleFaultType : public CNode
{
public:
	CThrottleFaultType() : CNode() {}
	CThrottleFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CThrottleFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CThrottleFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long Rate (1...1)
	//
	static int GetRateMinCount();
	static int GetRateMaxCount();
	int GetRateCount();
	bool HasRate();
	void AddRate(CSchemaLong Rate);
	void InsertRateAt(CSchemaLong Rate, int nIndex);
	void ReplaceRateAt(CSchemaLong Rate, int nIndex);
	CSchemaLong GetRateAt(int nIndex);
	CSchemaLong GetRate();
	xercesc::DOMNode* GetStartingRateCursor();
	xercesc::DOMNode* GetAdvancedRateCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetRateValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRateAt(int nIndex);
	void RemoveRate();

	//
	// long Period (1...1)
	//
	static int GetPeriodMinCount();
	static int GetPeriodMaxCount();
	int GetPeriodCount();
	bool HasPeriod();
	void AddPeriod(CSchemaLong Period);
	void InsertPeriodAt(CSchemaLong Period, int nIndex);
	void ReplacePeriodAt(CSchemaLong Period, int nIndex);
	CSchemaLong GetPeriodAt(int nIndex);
	CSchemaLong GetPeriod();
	xercesc::DOMNode* GetStartingPeriodCursor();
	xercesc::DOMNode* GetAdvancedPeriodCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetPeriodValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePeriodAt(int nIndex);
	void RemovePeriod();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER CDuplicateFaultType : public CNode
{
public:
	CDuplicateFaultType() : CNode() {}
	CDuplicateFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CDuplicateFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CDuplicateFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long Rate (1...1)
	//
	static int GetRateMinCount();
	static int GetRateMaxCount();
	int GetRateCount();
	bool HasRate();
	void AddRate(CSchemaLong Rate);
	void InsertRateAt(CSchemaLong Rate, int nIndex);
	void ReplaceRateAt(CSchemaLong Rate, int nIndex);
	CSchemaLong GetRateAt(int nIndex);
	CSchemaLong GetRate();
	xercesc::DOMNode* GetStartingRateCursor();
	xercesc::DOMNode* GetAdvancedRateCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetRateValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRateAt(int nIndex);
	void RemoveRate();

	//
	// long Times (1...1)
	//
	static int GetTimesMinCount();
	static int GetTimesMaxCount();
	int GetTimesCount();
	bool HasTimes();
	void AddTimes(CSchemaLong Times);
	void InsertTimesAt(CSchemaLong Times, int nIndex);
	void ReplaceTimesAt(CSchemaLong Times, int nIndex);
	CSchemaLong GetTimesAt(int nIndex);
	CSchemaLong GetTimes();
	xercesc::DOMNode* GetStartingTimesCursor();
	xercesc::DOMNode* GetAdvancedTimesCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetTimesValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveTimesAt(int nIndex);
	void RemoveTimes();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER COutOfOrderFaultType : public CNode
{
public:
	COutOfOrderFaultType() : CNode() {}
	COutOfOrderFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	COutOfOrderFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~COutOfOrderFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long Rate (1...1)
	//
	static int GetRateMinCount();
	static int GetRateMaxCount();
	int GetRateCount();
	bool HasRate();
	void AddRate(CSchemaLong Rate);
	void InsertRateAt(CSchemaLong Rate, int nIndex);
	void ReplaceRateAt(CSchemaLong Rate, int nIndex);
	CSchemaLong GetRateAt(int nIndex);
	CSchemaLong GetRate();
	xercesc::DOMNode* GetStartingRateCursor();
	xercesc::DOMNode* GetAdvancedRateCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetRateValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRateAt(int nIndex);
	void RemoveRate();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER CTamperFaultType : public CNode
{
public:
	CTamperFaultType() : CNode() {}
	CTamperFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CTamperFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CTamperFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// boolean IsInput (1...1)
	//
	static int GetIsInputMinCount();
	static int GetIsInputMaxCount();
	int GetIsInputCount();
	bool HasIsInput();
	void AddIsInput(CSchemaBoolean IsInput);
	void InsertIsInputAt(CSchemaBoolean IsInput, int nIndex);
	void ReplaceIsInputAt(CSchemaBoolean IsInput, int nIndex);
	CSchemaBoolean GetIsInputAt(int nIndex);
	CSchemaBoolean GetIsInput();
	xercesc::DOMNode* GetStartingIsInputCursor();
	xercesc::DOMNode* GetAdvancedIsInputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInputAt(int nIndex);
	void RemoveIsInput();

	//
	// long Rate (1...1)
	//
	static int GetRateMinCount();
	static int GetRateMaxCount();
	int GetRateCount();
	bool HasRate();
	void AddRate(CSchemaLong Rate);
	void InsertRateAt(CSchemaLong Rate, int nIndex);
	void ReplaceRateAt(CSchemaLong Rate, int nIndex);
	CSchemaLong GetRateAt(int nIndex);
	CSchemaLong GetRate();
	xercesc::DOMNode* GetStartingRateCursor();
	xercesc::DOMNode* GetAdvancedRateCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetRateValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRateAt(int nIndex);
	void RemoveRate();

	//
	// boolean IsRewrite (1...1)
	//
	static int GetIsRewriteMinCount();
	static int GetIsRewriteMaxCount();
	int GetIsRewriteCount();
	bool HasIsRewrite();
	void AddIsRewrite(CSchemaBoolean IsRewrite);
	void InsertIsRewriteAt(CSchemaBoolean IsRewrite, int nIndex);
	void ReplaceIsRewriteAt(CSchemaBoolean IsRewrite, int nIndex);
	CSchemaBoolean GetIsRewriteAt(int nIndex);
	CSchemaBoolean GetIsRewrite();
	xercesc::DOMNode* GetStartingIsRewriteCursor();
	xercesc::DOMNode* GetAdvancedIsRewriteCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsRewriteValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsRewriteAt(int nIndex);
	void RemoveIsRewrite();

	//
	// boolean IsOutput (1...1)
	//
	static int GetIsOutputMinCount();
	static int GetIsOutputMaxCount();
	int GetIsOutputCount();
	bool HasIsOutput();
	void AddIsOutput(CSchemaBoolean IsOutput);
	void InsertIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	void ReplaceIsOutputAt(CSchemaBoolean IsOutput, int nIndex);
	CSchemaBoolean GetIsOutputAt(int nIndex);
	CSchemaBoolean GetIsOutput();
	xercesc::DOMNode* GetStartingIsOutputCursor();
	xercesc::DOMNode* GetAdvancedIsOutputCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsOutputValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsOutputAt(int nIndex);
	void RemoveIsOutput();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType4 : public CNode
{
public:
	CFaultItemType4() : CNode() {}
	CFaultItemType4(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType4(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType4() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// LagFault LagFault (1...1)
	//
	static int GetLagFaultMinCount();
	static int GetLagFaultMaxCount();
	int GetLagFaultCount();
	bool HasLagFault();
	void AddLagFault(CLagFaultType& LagFault);
	void InsertLagFaultAt(CLagFaultType& LagFault, int nIndex);
	void ReplaceLagFaultAt(CLagFaultType& LagFault, int nIndex);
	CLagFaultType GetLagFaultAt(int nIndex);
	CLagFaultType GetLagFault();
	xercesc::DOMNode* GetStartingLagFaultCursor();
	xercesc::DOMNode* GetAdvancedLagFaultCursor(xercesc::DOMNode* pCurNode);
	CLagFaultType GetLagFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveLagFaultAt(int nIndex);
	void RemoveLagFault();

	//
	// DropFault DropFault (1...1)
	//
	static int GetDropFaultMinCount();
	static int GetDropFaultMaxCount();
	int GetDropFaultCount();
	bool HasDropFault();
	void AddDropFault(CDropFaultType& DropFault);
	void InsertDropFaultAt(CDropFaultType& DropFault, int nIndex);
	void ReplaceDropFaultAt(CDropFaultType& DropFault, int nIndex);
	CDropFaultType GetDropFaultAt(int nIndex);
	CDropFaultType GetDropFault();
	xercesc::DOMNode* GetStartingDropFaultCursor();
	xercesc::DOMNode* GetAdvancedDropFaultCursor(xercesc::DOMNode* pCurNode);
	CDropFaultType GetDropFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDropFaultAt(int nIndex);
	void RemoveDropFault();

	//
	// ThrottleFault ThrottleFault (1...1)
	//
	static int GetThrottleFaultMinCount();
	static int GetThrottleFaultMaxCount();
	int GetThrottleFaultCount();
	bool HasThrottleFault();
	void AddThrottleFault(CThrottleFaultType& ThrottleFault);
	void InsertThrottleFaultAt(CThrottleFaultType& ThrottleFault, int nIndex);
	void ReplaceThrottleFaultAt(CThrottleFaultType& ThrottleFault, int nIndex);
	CThrottleFaultType GetThrottleFaultAt(int nIndex);
	CThrottleFaultType GetThrottleFault();
	xercesc::DOMNode* GetStartingThrottleFaultCursor();
	xercesc::DOMNode* GetAdvancedThrottleFaultCursor(xercesc::DOMNode* pCurNode);
	CThrottleFaultType GetThrottleFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveThrottleFaultAt(int nIndex);
	void RemoveThrottleFault();

	//
	// DuplicateFault DuplicateFault (1...1)
	//
	static int GetDuplicateFaultMinCount();
	static int GetDuplicateFaultMaxCount();
	int GetDuplicateFaultCount();
	bool HasDuplicateFault();
	void AddDuplicateFault(CDuplicateFaultType& DuplicateFault);
	void InsertDuplicateFaultAt(CDuplicateFaultType& DuplicateFault, int nIndex);
	void ReplaceDuplicateFaultAt(CDuplicateFaultType& DuplicateFault, int nIndex);
	CDuplicateFaultType GetDuplicateFaultAt(int nIndex);
	CDuplicateFaultType GetDuplicateFault();
	xercesc::DOMNode* GetStartingDuplicateFaultCursor();
	xercesc::DOMNode* GetAdvancedDuplicateFaultCursor(xercesc::DOMNode* pCurNode);
	CDuplicateFaultType GetDuplicateFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDuplicateFaultAt(int nIndex);
	void RemoveDuplicateFault();

	//
	// OutOfOrderFault OutOfOrderFault (1...1)
	//
	static int GetOutOfOrderFaultMinCount();
	static int GetOutOfOrderFaultMaxCount();
	int GetOutOfOrderFaultCount();
	bool HasOutOfOrderFault();
	void AddOutOfOrderFault(COutOfOrderFaultType& OutOfOrderFault);
	void InsertOutOfOrderFaultAt(COutOfOrderFaultType& OutOfOrderFault, int nIndex);
	void ReplaceOutOfOrderFaultAt(COutOfOrderFaultType& OutOfOrderFault, int nIndex);
	COutOfOrderFaultType GetOutOfOrderFaultAt(int nIndex);
	COutOfOrderFaultType GetOutOfOrderFault();
	xercesc::DOMNode* GetStartingOutOfOrderFaultCursor();
	xercesc::DOMNode* GetAdvancedOutOfOrderFaultCursor(xercesc::DOMNode* pCurNode);
	COutOfOrderFaultType GetOutOfOrderFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveOutOfOrderFaultAt(int nIndex);
	void RemoveOutOfOrderFault();

	//
	// TamperFault TamperFault (1...1)
	//
	static int GetTamperFaultMinCount();
	static int GetTamperFaultMaxCount();
	int GetTamperFaultCount();
	bool HasTamperFault();
	void AddTamperFault(CTamperFaultType& TamperFault);
	void InsertTamperFaultAt(CTamperFaultType& TamperFault, int nIndex);
	void ReplaceTamperFaultAt(CTamperFaultType& TamperFault, int nIndex);
	CTamperFaultType GetTamperFaultAt(int nIndex);
	CTamperFaultType GetTamperFault();
	xercesc::DOMNode* GetStartingTamperFaultCursor();
	xercesc::DOMNode* GetAdvancedTamperFaultCursor(xercesc::DOMNode* pCurNode);
	CTamperFaultType GetTamperFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveTamperFaultAt(int nIndex);
	void RemoveTamperFault();
};


class FaultInjectionXML_DECLSPECIFIER CNetWokFaultType : public CNode
{
public:
	CNetWokFaultType() : CNode() {}
	CNetWokFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CNetWokFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CNetWokFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// dateTime StartTime (0...1)
	//
	static int GetStartTimeMinCount();
	static int GetStartTimeMaxCount();
	int GetStartTimeCount();
	bool HasStartTime();
	void AddStartTime(CSchemaDateTime StartTime);
	void InsertStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	void ReplaceStartTimeAt(CSchemaDateTime StartTime, int nIndex);
	CSchemaDateTime GetStartTimeAt(int nIndex);
	CSchemaDateTime GetStartTime();
	xercesc::DOMNode* GetStartingStartTimeCursor();
	xercesc::DOMNode* GetAdvancedStartTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetStartTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveStartTimeAt(int nIndex);
	void RemoveStartTime();

	//
	// dateTime EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaDateTime EndTime);
	void InsertEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaDateTime EndTime, int nIndex);
	CSchemaDateTime GetEndTimeAt(int nIndex);
	CSchemaDateTime GetEndTime();
	xercesc::DOMNode* GetStartingEndTimeCursor();
	xercesc::DOMNode* GetAdvancedEndTimeCursor(xercesc::DOMNode* pCurNode);
	CSchemaDateTime GetEndTimeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// Filter Filter (1...1)
	//
	static int GetFilterMinCount();
	static int GetFilterMaxCount();
	int GetFilterCount();
	bool HasFilter();
	void AddFilter(CFilterType& Filter);
	void InsertFilterAt(CFilterType& Filter, int nIndex);
	void ReplaceFilterAt(CFilterType& Filter, int nIndex);
	CFilterType GetFilterAt(int nIndex);
	CFilterType GetFilter();
	xercesc::DOMNode* GetStartingFilterCursor();
	xercesc::DOMNode* GetAdvancedFilterCursor(xercesc::DOMNode* pCurNode);
	CFilterType GetFilterValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFilterAt(int nIndex);
	void RemoveFilter();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType4& FaultItem);
	void InsertFaultItemAt(CFaultItemType4& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType4& FaultItem, int nIndex);
	CFaultItemType4 GetFaultItemAt(int nIndex);
	CFaultItemType4 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType4 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CPortNoType : public CNode
{
public:
	CPortNoType() : CNode() {}
	CPortNoType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CPortNoType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CPortNoType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// long PortNoScope (1...1)
	//
	static int GetPortNoScopeMinCount();
	static int GetPortNoScopeMaxCount();
	int GetPortNoScopeCount();
	bool HasPortNoScope();
	void AddPortNoScope(CSchemaLong PortNoScope);
	void InsertPortNoScopeAt(CSchemaLong PortNoScope, int nIndex);
	void ReplacePortNoScopeAt(CSchemaLong PortNoScope, int nIndex);
	CSchemaLong GetPortNoScopeAt(int nIndex);
	CSchemaLong GetPortNoScope();
	xercesc::DOMNode* GetStartingPortNoScopeCursor();
	xercesc::DOMNode* GetAdvancedPortNoScopeCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetPortNoScopeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePortNoScopeAt(int nIndex);
	void RemovePortNoScope();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType5 : public CNode
{
public:
	CFaultItemType5() : CNode() {}
	CFaultItemType5(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType5(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType5() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// PortNo PortNo (1...1)
	//
	static int GetPortNoMinCount();
	static int GetPortNoMaxCount();
	int GetPortNoCount();
	bool HasPortNo();
	void AddPortNo(CPortNoType& PortNo);
	void InsertPortNoAt(CPortNoType& PortNo, int nIndex);
	void ReplacePortNoAt(CPortNoType& PortNo, int nIndex);
	CPortNoType GetPortNoAt(int nIndex);
	CPortNoType GetPortNo();
	xercesc::DOMNode* GetStartingPortNoCursor();
	xercesc::DOMNode* GetAdvancedPortNoCursor(xercesc::DOMNode* pCurNode);
	CPortNoType GetPortNoValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePortNoAt(int nIndex);
	void RemovePortNo();
};


class FaultInjectionXML_DECLSPECIFIER CPortFaultType : public CNode
{
public:
	CPortFaultType() : CNode() {}
	CPortFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CPortFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CPortFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType5& FaultItem);
	void InsertFaultItemAt(CFaultItemType5& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType5& FaultItem, int nIndex);
	CFaultItemType5 GetFaultItemAt(int nIndex);
	CFaultItemType5 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType5 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CRTFaultType : public CNode
{
public:
	CRTFaultType() : CNode() {}
	CRTFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CRTFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CRTFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// boolean IsInject (0...1)
	//
	static int GetIsInjectMinCount();
	static int GetIsInjectMaxCount();
	int GetIsInjectCount();
	bool HasIsInject();
	void AddIsInject(CSchemaBoolean IsInject);
	void InsertIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	void ReplaceIsInjectAt(CSchemaBoolean IsInject, int nIndex);
	CSchemaBoolean GetIsInjectAt(int nIndex);
	CSchemaBoolean GetIsInject();
	xercesc::DOMNode* GetStartingIsInjectCursor();
	xercesc::DOMNode* GetAdvancedIsInjectCursor(xercesc::DOMNode* pCurNode);
	CSchemaBoolean GetIsInjectValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveIsInjectAt(int nIndex);
	void RemoveIsInject();

	//
	// string Path (1...1)
	//
	static int GetPathMinCount();
	static int GetPathMaxCount();
	int GetPathCount();
	bool HasPath();
	void AddPath(CSchemaString Path);
	void InsertPathAt(CSchemaString Path, int nIndex);
	void ReplacePathAt(CSchemaString Path, int nIndex);
	CSchemaString GetPathAt(int nIndex);
	CSchemaString GetPath();
	xercesc::DOMNode* GetStartingPathCursor();
	xercesc::DOMNode* GetAdvancedPathCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetPathValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePathAt(int nIndex);
	void RemovePath();

	//
	// string ValName (1...1)
	//
	static int GetValNameMinCount();
	static int GetValNameMaxCount();
	int GetValNameCount();
	bool HasValName();
	void AddValName(CSchemaString ValName);
	void InsertValNameAt(CSchemaString ValName, int nIndex);
	void ReplaceValNameAt(CSchemaString ValName, int nIndex);
	CSchemaString GetValNameAt(int nIndex);
	CSchemaString GetValName();
	xercesc::DOMNode* GetStartingValNameCursor();
	xercesc::DOMNode* GetAdvancedValNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetValNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveValNameAt(int nIndex);
	void RemoveValName();

	//
	// long ValType (1...1)
	//
	static int GetValTypeMinCount();
	static int GetValTypeMaxCount();
	int GetValTypeCount();
	bool HasValType();
	void AddValType(CSchemaLong ValType);
	void InsertValTypeAt(CSchemaLong ValType, int nIndex);
	void ReplaceValTypeAt(CSchemaLong ValType, int nIndex);
	CSchemaLong GetValTypeAt(int nIndex);
	CSchemaLong GetValType();
	xercesc::DOMNode* GetStartingValTypeCursor();
	xercesc::DOMNode* GetAdvancedValTypeCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetValTypeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveValTypeAt(int nIndex);
	void RemoveValType();

	//
	// string Value (1...1)
	//
	static int GetValue2MinCount();
	static int GetValue2MaxCount();
	int GetValue2Count();
	bool HasValue2();
	void AddValue2(CSchemaString Value2);
	void InsertValue2At(CSchemaString Value2, int nIndex);
	void ReplaceValue2At(CSchemaString Value2, int nIndex);
	CSchemaString GetValue2At(int nIndex);
	CSchemaString GetValue2();
	xercesc::DOMNode* GetStartingValue2Cursor();
	xercesc::DOMNode* GetAdvancedValue2Cursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetValue2ValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveValue2At(int nIndex);
	void RemoveValue2();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType6 : public CNode
{
public:
	CFaultItemType6() : CNode() {}
	CFaultItemType6(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType6(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType6() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// RTFault RTFault (1...1)
	//
	static int GetRTFaultMinCount();
	static int GetRTFaultMaxCount();
	int GetRTFaultCount();
	bool HasRTFault();
	void AddRTFault(CRTFaultType& RTFault);
	void InsertRTFaultAt(CRTFaultType& RTFault, int nIndex);
	void ReplaceRTFaultAt(CRTFaultType& RTFault, int nIndex);
	CRTFaultType GetRTFaultAt(int nIndex);
	CRTFaultType GetRTFault();
	xercesc::DOMNode* GetStartingRTFaultCursor();
	xercesc::DOMNode* GetAdvancedRTFaultCursor(xercesc::DOMNode* pCurNode);
	CRTFaultType GetRTFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRTFaultAt(int nIndex);
	void RemoveRTFault();
};


class FaultInjectionXML_DECLSPECIFIER CRegisterTableFaultType : public CNode
{
public:
	CRegisterTableFaultType() : CNode() {}
	CRegisterTableFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CRegisterTableFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CRegisterTableFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType6& FaultItem);
	void InsertFaultItemAt(CFaultItemType6& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType6& FaultItem, int nIndex);
	CFaultItemType6 GetFaultItemAt(int nIndex);
	CFaultItemType6 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType6 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CFaultItemType7 : public CNode
{
public:
	CFaultItemType7() : CNode() {}
	CFaultItemType7(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultItemType7(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultItemType7() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// string VMName (1...1)
	//
	static int GetVMNameMinCount();
	static int GetVMNameMaxCount();
	int GetVMNameCount();
	bool HasVMName();
	void AddVMName(CSchemaString VMName);
	void InsertVMNameAt(CSchemaString VMName, int nIndex);
	void ReplaceVMNameAt(CSchemaString VMName, int nIndex);
	CSchemaString GetVMNameAt(int nIndex);
	CSchemaString GetVMName();
	xercesc::DOMNode* GetStartingVMNameCursor();
	xercesc::DOMNode* GetAdvancedVMNameCursor(xercesc::DOMNode* pCurNode);
	CSchemaString GetVMNameValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveVMNameAt(int nIndex);
	void RemoveVMName();

	//
	// long FaultType (1...1)
	//
	static int GetFaultTypeMinCount();
	static int GetFaultTypeMaxCount();
	int GetFaultTypeCount();
	bool HasFaultType();
	void AddFaultType(CSchemaLong FaultType);
	void InsertFaultTypeAt(CSchemaLong FaultType, int nIndex);
	void ReplaceFaultTypeAt(CSchemaLong FaultType, int nIndex);
	CSchemaLong GetFaultTypeAt(int nIndex);
	CSchemaLong GetFaultType();
	xercesc::DOMNode* GetStartingFaultTypeCursor();
	xercesc::DOMNode* GetAdvancedFaultTypeCursor(xercesc::DOMNode* pCurNode);
	CSchemaLong GetFaultTypeValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultTypeAt(int nIndex);
	void RemoveFaultType();
};


class FaultInjectionXML_DECLSPECIFIER CVirtualMachineFaultType : public CNode
{
public:
	CVirtualMachineFaultType() : CNode() {}
	CVirtualMachineFaultType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CVirtualMachineFaultType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CVirtualMachineFaultType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// FaultItem FaultItem (1...1)
	//
	static int GetFaultItemMinCount();
	static int GetFaultItemMaxCount();
	int GetFaultItemCount();
	bool HasFaultItem();
	void AddFaultItem(CFaultItemType7& FaultItem);
	void InsertFaultItemAt(CFaultItemType7& FaultItem, int nIndex);
	void ReplaceFaultItemAt(CFaultItemType7& FaultItem, int nIndex);
	CFaultItemType7 GetFaultItemAt(int nIndex);
	CFaultItemType7 GetFaultItem();
	xercesc::DOMNode* GetStartingFaultItemCursor();
	xercesc::DOMNode* GetAdvancedFaultItemCursor(xercesc::DOMNode* pCurNode);
	CFaultItemType7 GetFaultItemValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveFaultItemAt(int nIndex);
	void RemoveFaultItem();
};


class FaultInjectionXML_DECLSPECIFIER CFaultInjectXMLType : public CNode
{
public:
	CFaultInjectXMLType() : CNode() {}
	CFaultInjectXMLType(xercesc::DOMNode* pThisNode) : CNode(pThisNode) {}
	CFaultInjectXMLType(xercesc::DOMDocument* pDoc) : CNode(pDoc) {}
	virtual ~CFaultInjectXMLType() {}
	static EGroupType GetGroupType();
	void AdjustPrefix();

	//
	// NetWokFaultType NetWokFault (1...1)
	//
	static int GetNetWokFaultMinCount();
	static int GetNetWokFaultMaxCount();
	int GetNetWokFaultCount();
	bool HasNetWokFault();
	void AddNetWokFault(CNetWokFaultType& NetWokFault);
	void InsertNetWokFaultAt(CNetWokFaultType& NetWokFault, int nIndex);
	void ReplaceNetWokFaultAt(CNetWokFaultType& NetWokFault, int nIndex);
	CNetWokFaultType GetNetWokFaultAt(int nIndex);
	CNetWokFaultType GetNetWokFault();
	xercesc::DOMNode* GetStartingNetWokFaultCursor();
	xercesc::DOMNode* GetAdvancedNetWokFaultCursor(xercesc::DOMNode* pCurNode);
	CNetWokFaultType GetNetWokFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveNetWokFaultAt(int nIndex);
	void RemoveNetWokFault();

	//
	// HostFaultType HostFault (1...1)
	//
	static int GetHostFaultMinCount();
	static int GetHostFaultMaxCount();
	int GetHostFaultCount();
	bool HasHostFault();
	void AddHostFault(CHostFaultType& HostFault);
	void InsertHostFaultAt(CHostFaultType& HostFault, int nIndex);
	void ReplaceHostFaultAt(CHostFaultType& HostFault, int nIndex);
	CHostFaultType GetHostFaultAt(int nIndex);
	CHostFaultType GetHostFault();
	xercesc::DOMNode* GetStartingHostFaultCursor();
	xercesc::DOMNode* GetAdvancedHostFaultCursor(xercesc::DOMNode* pCurNode);
	CHostFaultType GetHostFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveHostFaultAt(int nIndex);
	void RemoveHostFault();

	//
	// DBFaultType DBFault (1...1)
	//
	static int GetDBFaultMinCount();
	static int GetDBFaultMaxCount();
	int GetDBFaultCount();
	bool HasDBFault();
	void AddDBFault(CDBFaultType& DBFault);
	void InsertDBFaultAt(CDBFaultType& DBFault, int nIndex);
	void ReplaceDBFaultAt(CDBFaultType& DBFault, int nIndex);
	CDBFaultType GetDBFaultAt(int nIndex);
	CDBFaultType GetDBFault();
	xercesc::DOMNode* GetStartingDBFaultCursor();
	xercesc::DOMNode* GetAdvancedDBFaultCursor(xercesc::DOMNode* pCurNode);
	CDBFaultType GetDBFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveDBFaultAt(int nIndex);
	void RemoveDBFault();

	//
	// BasicServiceFaultType BasicServiceFault (1...1)
	//
	static int GetBasicServiceFaultMinCount();
	static int GetBasicServiceFaultMaxCount();
	int GetBasicServiceFaultCount();
	bool HasBasicServiceFault();
	void AddBasicServiceFault(CBasicServiceFaultType& BasicServiceFault);
	void InsertBasicServiceFaultAt(CBasicServiceFaultType& BasicServiceFault, int nIndex);
	void ReplaceBasicServiceFaultAt(CBasicServiceFaultType& BasicServiceFault, int nIndex);
	CBasicServiceFaultType GetBasicServiceFaultAt(int nIndex);
	CBasicServiceFaultType GetBasicServiceFault();
	xercesc::DOMNode* GetStartingBasicServiceFaultCursor();
	xercesc::DOMNode* GetAdvancedBasicServiceFaultCursor(xercesc::DOMNode* pCurNode);
	CBasicServiceFaultType GetBasicServiceFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveBasicServiceFaultAt(int nIndex);
	void RemoveBasicServiceFault();

	//
	// VirtualMachineFaultType VirtualMachineFault (1...1)
	//
	static int GetVirtualMachineFaultMinCount();
	static int GetVirtualMachineFaultMaxCount();
	int GetVirtualMachineFaultCount();
	bool HasVirtualMachineFault();
	void AddVirtualMachineFault(CVirtualMachineFaultType& VirtualMachineFault);
	void InsertVirtualMachineFaultAt(CVirtualMachineFaultType& VirtualMachineFault, int nIndex);
	void ReplaceVirtualMachineFaultAt(CVirtualMachineFaultType& VirtualMachineFault, int nIndex);
	CVirtualMachineFaultType GetVirtualMachineFaultAt(int nIndex);
	CVirtualMachineFaultType GetVirtualMachineFault();
	xercesc::DOMNode* GetStartingVirtualMachineFaultCursor();
	xercesc::DOMNode* GetAdvancedVirtualMachineFaultCursor(xercesc::DOMNode* pCurNode);
	CVirtualMachineFaultType GetVirtualMachineFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveVirtualMachineFaultAt(int nIndex);
	void RemoveVirtualMachineFault();

	//
	// RegisterTableFaultType RegisterTableFault (1...1)
	//
	static int GetRegisterTableFaultMinCount();
	static int GetRegisterTableFaultMaxCount();
	int GetRegisterTableFaultCount();
	bool HasRegisterTableFault();
	void AddRegisterTableFault(CRegisterTableFaultType& RegisterTableFault);
	void InsertRegisterTableFaultAt(CRegisterTableFaultType& RegisterTableFault, int nIndex);
	void ReplaceRegisterTableFaultAt(CRegisterTableFaultType& RegisterTableFault, int nIndex);
	CRegisterTableFaultType GetRegisterTableFaultAt(int nIndex);
	CRegisterTableFaultType GetRegisterTableFault();
	xercesc::DOMNode* GetStartingRegisterTableFaultCursor();
	xercesc::DOMNode* GetAdvancedRegisterTableFaultCursor(xercesc::DOMNode* pCurNode);
	CRegisterTableFaultType GetRegisterTableFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemoveRegisterTableFaultAt(int nIndex);
	void RemoveRegisterTableFault();

	//
	// PortFaultType PortFault (1...1)
	//
	static int GetPortFaultMinCount();
	static int GetPortFaultMaxCount();
	int GetPortFaultCount();
	bool HasPortFault();
	void AddPortFault(CPortFaultType& PortFault);
	void InsertPortFaultAt(CPortFaultType& PortFault, int nIndex);
	void ReplacePortFaultAt(CPortFaultType& PortFault, int nIndex);
	CPortFaultType GetPortFaultAt(int nIndex);
	CPortFaultType GetPortFault();
	xercesc::DOMNode* GetStartingPortFaultCursor();
	xercesc::DOMNode* GetAdvancedPortFaultCursor(xercesc::DOMNode* pCurNode);
	CPortFaultType GetPortFaultValueAtCursor(xercesc::DOMNode* pCurNode);

	void RemovePortFaultAt(int nIndex);
	void RemovePortFault();
};


}

#endif // FaultInjectionXML_H_INCLUDED
